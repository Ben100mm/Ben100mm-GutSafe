# Copyright (c) 2024 Benjamin [Last Name]. All rights reserved.
# License: PROPRIETARY - See LICENSE file for details
# Automated code quality checks and reviews

name: Code Quality & Security

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run security audit daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  NODE_VERSION: '18'
  SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
  SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

jobs:
  # Linting and formatting checks
  lint-and-format:
    name: Lint & Format Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Check Prettier formatting
        run: npm run format:check

      - name: Run TypeScript type checking
        run: npm run type-check

  # Security audit
  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: npm run security:audit

      - name: Run security linting
        run: npm run lint:security

  # Test coverage
  test-coverage:
    name: Test Coverage
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests with coverage
        run: npm run test:coverage

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: true

  # SonarQube analysis
  sonar-analysis:
    name: SonarQube Analysis
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests with coverage
        run: npm run test:coverage

      - name: SonarQube Scan
        uses: sonarqube-quality-gate-action@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  # Code quality summary
  quality-summary:
    name: Quality Summary
    runs-on: ubuntu-latest
    needs: [lint-and-format, security-audit, test-coverage]
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Generate quality report
        run: |
          echo "## Code Quality Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Linting & Formatting" >> $GITHUB_STEP_SUMMARY
          if [ "${{ needs.lint-and-format.result }}" == "success" ]; then
            echo "‚úÖ **PASSED** - All linting and formatting checks passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå **FAILED** - Linting or formatting issues found" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Security Audit" >> $GITHUB_STEP_SUMMARY
          if [ "${{ needs.security-audit.result }}" == "success" ]; then
            echo "‚úÖ **PASSED** - No security vulnerabilities found" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå **FAILED** - Security vulnerabilities detected" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Test Coverage" >> $GITHUB_STEP_SUMMARY
          if [ "${{ needs.test-coverage.result }}" == "success" ]; then
            echo "‚úÖ **PASSED** - Test coverage requirements met" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå **FAILED** - Test coverage below threshold" >> $GITHUB_STEP_SUMMARY
          fi

  # Automated code review
  automated-review:
    name: Automated Code Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run comprehensive quality check
        run: npm run quality:check

      - name: Comment PR with quality report
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            
            // Read coverage report if it exists
            let coverageReport = '';
            try {
              const coveragePath = path.join(process.cwd(), 'coverage', 'lcov-report', 'index.html');
              if (fs.existsSync(coveragePath)) {
                coverageReport = 'üìä Coverage report generated successfully';
              }
            } catch (error) {
              coverageReport = '‚ö†Ô∏è Coverage report not available';
            }
            
            const comment = `
            ## ü§ñ Automated Code Review
            
            ### Quality Checks
            - **Linting**: ‚úÖ Passed
            - **Formatting**: ‚úÖ Passed  
            - **Type Checking**: ‚úÖ Passed
            - **Security Audit**: ‚úÖ Passed
            - **Test Coverage**: ‚úÖ Passed
            
            ### Coverage
            ${coverageReport}
            
            ### Recommendations
            - All quality checks have passed ‚úÖ
            - Code follows established patterns and conventions
            - No security vulnerabilities detected
            - Test coverage meets requirements
            
            ### Next Steps
            - Review any SonarQube findings (if applicable)
            - Ensure all tests pass locally
            - Verify functionality in development environment
            
            ---
            *This is an automated review. Please review the changes manually as well.*
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  # Performance testing
  performance-test:
    name: Performance Test
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run performance tests
        run: npm run test -- --testPathPattern=performance

      - name: Upload performance results
        uses: actions/upload-artifact@v3
        with:
          name: performance-results
          path: performance-results/
          retention-days: 30
