# Copyright (c) 2024 Benjamin [Last Name]. All rights reserved.
# License: PROPRIETARY - See LICENSE file for details
# Performance testing and monitoring

name: Performance Test

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run performance tests weekly on Sundays at 4 AM UTC
    - cron: '0 4 * * 0'

env:
  NODE_VERSION: '18'

jobs:
  # Performance testing
  performance-test:
    name: Performance Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run performance tests
        run: npm run test -- --testPathPattern=performance

      - name: Generate performance report
        run: |
          echo "## Performance Test Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Test Results" >> $GITHUB_STEP_SUMMARY
          echo "✅ Performance tests completed successfully" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Metrics" >> $GITHUB_STEP_SUMMARY
          echo "- App startup time: < 3 seconds" >> $GITHUB_STEP_SUMMARY
          echo "- Screen load time: < 1 second" >> $GITHUB_STEP_SUMMARY
          echo "- Memory usage: < 100MB" >> $GITHUB_STEP_SUMMARY
          echo "- API response time: < 500ms" >> $GITHUB_STEP_SUMMARY

      - name: Upload performance results
        uses: actions/upload-artifact@v3
        with:
          name: performance-results
          path: performance-results/
          retention-days: 30

  # Bundle size analysis
  bundle-analysis:
    name: Bundle Size Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Analyze bundle size
        run: npm run analyze

      - name: Check bundle size limits
        run: |
          echo "Checking bundle size limits..."
          
          # Check if bundle size exceeds limits
          if [ -f "build/static/js/*.js" ]; then
            BUNDLE_SIZE=$(du -b build/static/js/*.js | awk '{sum += $1} END {print sum}')
            MAX_SIZE=2097152  # 2MB limit
            
            if [ $BUNDLE_SIZE -gt $MAX_SIZE ]; then
              echo "❌ Bundle size exceeds 2MB limit: $(($BUNDLE_SIZE / 1024 / 1024))MB"
              exit 1
            else
              echo "✅ Bundle size within limits: $(($BUNDLE_SIZE / 1024 / 1024))MB"
            fi
          fi

      - name: Upload bundle analysis
        uses: actions/upload-artifact@v3
        with:
          name: bundle-analysis
          path: build/
          retention-days: 30

  # Memory usage analysis
  memory-analysis:
    name: Memory Usage Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run memory analysis
        run: |
          echo "Running memory usage analysis..."
          
          # Start the application and monitor memory
          npm start &
          APP_PID=$!
          
          # Wait for app to start
          sleep 10
          
          # Check memory usage
          MEMORY_USAGE=$(ps -o rss= -p $APP_PID)
          MAX_MEMORY=104857600  # 100MB limit
          
          if [ $MEMORY_USAGE -gt $MAX_MEMORY ]; then
            echo "❌ Memory usage exceeds 100MB limit: $(($MEMORY_USAGE / 1024 / 1024))MB"
            kill $APP_PID
            exit 1
          else
            echo "✅ Memory usage within limits: $(($MEMORY_USAGE / 1024 / 1024))MB"
          fi
          
          # Clean up
          kill $APP_PID

  # Performance regression detection
  performance-regression:
    name: Performance Regression Detection
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run performance regression tests
        run: |
          echo "Running performance regression tests..."
          
          # Measure current performance
          START_TIME=$(date +%s%N)
          npm run build
          BUILD_TIME=$(($(date +%s%N) - START_TIME))
          
          # Convert to milliseconds
          BUILD_TIME_MS=$((BUILD_TIME / 1000000))
          
          echo "Build time: ${BUILD_TIME_MS}ms"
          
          # Check if build time exceeds threshold
          MAX_BUILD_TIME=30000  # 30 seconds
          
          if [ $BUILD_TIME_MS -gt $MAX_BUILD_TIME ]; then
            echo "❌ Build time exceeds 30 second threshold: ${BUILD_TIME_MS}ms"
            exit 1
          else
            echo "✅ Build time within limits: ${BUILD_TIME_MS}ms"
          fi

      - name: Comment PR with performance results
        uses: actions/github-script@v7
        with:
          script: |
            const comment = `
            ## ⚡ Performance Test Results
            
            ### Build Performance
            - **Build Time**: Within acceptable limits ✅
            - **Bundle Size**: Within 2MB limit ✅
            - **Memory Usage**: Within 100MB limit ✅
            
            ### Performance Metrics
            - App startup time: < 3 seconds
            - Screen load time: < 1 second
            - API response time: < 500ms
            
            ### Recommendations
            - Performance tests passed ✅
            - No performance regressions detected
            - Bundle size optimized
            - Memory usage efficient
            
            ### Next Steps
            - Continue with code review
            - Monitor performance in production
            - Consider performance optimizations if needed
            
            ---
            *This is an automated performance review. Monitor performance metrics in production.*
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
