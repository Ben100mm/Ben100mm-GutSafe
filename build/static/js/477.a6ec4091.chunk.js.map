{"version":3,"file":"static/js/477.a6ec4091.chunk.js","mappings":"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","sources":["../node_modules/react-native-web/dist/exports/Linking/index.js","../node_modules/react-native-web/dist/exports/Share/index.js","../node_modules/react-native-web/dist/vendor/react-native/PooledClass/index.js","../node_modules/react-native-web/dist/exports/Touchable/BoundingDimensions.js","../node_modules/react-native-web/dist/exports/Touchable/Position.js","../node_modules/react-native-web/dist/exports/Touchable/index.js","../node_modules/react-native-web/dist/exports/Alert/index.js"],"sourcesContent":["/**\n * Copyright (c) Nicolas Gallagher.\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\nimport invariant from 'fbjs/lib/invariant';\nimport canUseDOM from '../../modules/canUseDom';\nvar initialURL = canUseDOM ? window.location.href : '';\nclass Linking {\n  constructor() {\n    this._eventCallbacks = {};\n  }\n  /**\n   * An object mapping of event name\n   * and all the callbacks subscribing to it\n   */\n  _dispatchEvent(event) {\n    for (var _len = arguments.length, data = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      data[_key - 1] = arguments[_key];\n    }\n    var listeners = this._eventCallbacks[event];\n    if (listeners != null && Array.isArray(listeners)) {\n      listeners.map(listener => {\n        listener(...data);\n      });\n    }\n  }\n\n  /**\n   * Adds a event listener for the specified event. The callback will be called when the\n   * said event is dispatched.\n   */\n  addEventListener(eventType, callback) {\n    var _this = this;\n    if (!_this._eventCallbacks[eventType]) {\n      _this._eventCallbacks[eventType] = [callback];\n    }\n    _this._eventCallbacks[eventType].push(callback);\n    return {\n      remove() {\n        var callbacks = _this._eventCallbacks[eventType];\n        var filteredCallbacks = callbacks.filter(c => c.toString() !== callback.toString());\n        _this._eventCallbacks[eventType] = filteredCallbacks;\n      }\n    };\n  }\n\n  /**\n   * Removes a previously added event listener for the specified event. The callback must\n   * be the same object as the one passed to `addEventListener`.\n   */\n  removeEventListener(eventType, callback) {\n    console.error(\"Linking.removeEventListener('\" + eventType + \"', ...): Method has been \" + 'deprecated. Please instead use `remove()` on the subscription ' + 'returned by `Linking.addEventListener`.');\n    var callbacks = this._eventCallbacks[eventType];\n    var filteredCallbacks = callbacks.filter(c => c.toString() !== callback.toString());\n    this._eventCallbacks[eventType] = filteredCallbacks;\n  }\n  canOpenURL() {\n    return Promise.resolve(true);\n  }\n  getInitialURL() {\n    return Promise.resolve(initialURL);\n  }\n\n  /**\n   * Try to open the given url in a secure fashion. The method returns a Promise object.\n   * If a target is passed (including undefined) that target will be used, otherwise '_blank'.\n   * If the url opens, the promise is resolved. If not, the promise is rejected.\n   * Dispatches the `onOpen` event if `url` is opened successfully.\n   */\n  openURL(url, target) {\n    if (arguments.length === 1) {\n      target = '_blank';\n    }\n    try {\n      open(url, target);\n      this._dispatchEvent('onOpen', url);\n      return Promise.resolve();\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  }\n  _validateURL(url) {\n    invariant(typeof url === 'string', 'Invalid URL: should be a string. Was: ' + url);\n    invariant(url, 'Invalid URL: cannot be empty');\n  }\n}\nvar open = (url, target) => {\n  if (canUseDOM) {\n    var urlToOpen = new URL(url, window.location).toString();\n    if (urlToOpen.indexOf('tel:') === 0) {\n      window.location = urlToOpen;\n    } else {\n      window.open(urlToOpen, target, 'noopener');\n    }\n  }\n};\nexport default new Linking();","/**\n * Copyright (c) Nicolas Gallagher.\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\nimport invariant from 'fbjs/lib/invariant';\nclass Share {\n  static share(content, options) {\n    if (options === void 0) {\n      options = {};\n    }\n    invariant(typeof content === 'object' && content !== null, 'Content to share must be a valid object');\n    invariant(typeof content.url === 'string' || typeof content.message === 'string', 'At least one of URL and message is required');\n    invariant(typeof options === 'object' && options !== null, 'Options must be a valid object');\n    invariant(!content.title || typeof content.title === 'string', 'Invalid title: title should be a string.');\n    if (window.navigator.share !== undefined) {\n      return window.navigator.share({\n        title: content.title,\n        text: content.message,\n        url: content.url\n      });\n    } else {\n      return Promise.reject(new Error('Share is not supported in this browser'));\n    }\n  }\n\n  /**\n   * The content was successfully shared.\n   */\n  static get sharedAction() {\n    return 'sharedAction';\n  }\n\n  /**\n   * The dialog has been dismissed.\n   * @platform ios\n   */\n  static get dismissedAction() {\n    return 'dismissedAction';\n  }\n}\nexport default Share;","/* eslint-disable */\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * From React 16.0.0\n */\n\nimport invariant from 'fbjs/lib/invariant';\nvar twoArgumentPooler = function twoArgumentPooler(a1, a2) {\n  var Klass = this;\n  if (Klass.instancePool.length) {\n    var instance = Klass.instancePool.pop();\n    Klass.call(instance, a1, a2);\n    return instance;\n  } else {\n    return new Klass(a1, a2);\n  }\n};\nvar standardReleaser = function standardReleaser(instance) {\n  var Klass = this;\n  instance.destructor();\n  if (Klass.instancePool.length < Klass.poolSize) {\n    Klass.instancePool.push(instance);\n  }\n};\nvar DEFAULT_POOL_SIZE = 10;\nvar DEFAULT_POOLER = twoArgumentPooler;\n\n/**\n * Augments `CopyConstructor` to be a poolable class, augmenting only the class\n * itself (statically) not adding any prototypical fields. Any CopyConstructor\n * you give this may have a `poolSize` property, and will look for a\n * prototypical `destructor` on instances.\n *\n * @param {Function} CopyConstructor Constructor that can be used to reset.\n * @param {Function} pooler Customizable pooler.\n */\nvar addPoolingTo = function addPoolingTo(CopyConstructor, pooler) {\n  // Casting as any so that flow ignores the actual implementation and trusts\n  // it to match the type we declared\n  var NewKlass = CopyConstructor;\n  NewKlass.instancePool = [];\n  NewKlass.getPooled = pooler || DEFAULT_POOLER;\n  if (!NewKlass.poolSize) {\n    NewKlass.poolSize = DEFAULT_POOL_SIZE;\n  }\n  NewKlass.release = standardReleaser;\n  return NewKlass;\n};\nvar PooledClass = {\n  addPoolingTo: addPoolingTo,\n  twoArgumentPooler: twoArgumentPooler\n};\nexport default PooledClass;","/**\n * Copyright (c) Nicolas Gallagher.\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\nimport PooledClass from '../../vendor/react-native/PooledClass';\nvar twoArgumentPooler = PooledClass.twoArgumentPooler;\n\n/**\n * PooledClass representing the bounding rectangle of a region.\n */\nfunction BoundingDimensions(width, height) {\n  this.width = width;\n  this.height = height;\n}\nBoundingDimensions.prototype.destructor = function () {\n  this.width = null;\n  this.height = null;\n};\nBoundingDimensions.getPooledFromElement = function (element) {\n  return BoundingDimensions.getPooled(element.offsetWidth, element.offsetHeight);\n};\nPooledClass.addPoolingTo(BoundingDimensions, twoArgumentPooler);\nexport default BoundingDimensions;","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\nimport PooledClass from '../../vendor/react-native/PooledClass';\nvar twoArgumentPooler = PooledClass.twoArgumentPooler;\nfunction Position(left, top) {\n  this.left = left;\n  this.top = top;\n}\nPosition.prototype.destructor = function () {\n  this.left = null;\n  this.top = null;\n};\nPooledClass.addPoolingTo(Position, twoArgumentPooler);\nexport default Position;","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n\n'use strict';\n\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/objectWithoutPropertiesLoose\";\nimport _objectSpread from \"@babel/runtime/helpers/objectSpread2\";\nimport AccessibilityUtil from '../../modules/AccessibilityUtil';\nimport BoundingDimensions from './BoundingDimensions';\nimport normalizeColor from '@react-native/normalize-colors';\nimport Position from './Position';\nimport React from 'react';\nimport UIManager from '../UIManager';\nimport View from '../View';\nimport { warnOnce } from '../../modules/warnOnce';\nvar extractSingleTouch = nativeEvent => {\n  var touches = nativeEvent.touches;\n  var changedTouches = nativeEvent.changedTouches;\n  var hasTouches = touches && touches.length > 0;\n  var hasChangedTouches = changedTouches && changedTouches.length > 0;\n  return !hasTouches && hasChangedTouches ? changedTouches[0] : hasTouches ? touches[0] : nativeEvent;\n};\n\n/**\n * `Touchable`: Taps done right.\n *\n * You hook your `ResponderEventPlugin` events into `Touchable`. `Touchable`\n * will measure time/geometry and tells you when to give feedback to the user.\n *\n * ====================== Touchable Tutorial ===============================\n * The `Touchable` mixin helps you handle the \"press\" interaction. It analyzes\n * the geometry of elements, and observes when another responder (scroll view\n * etc) has stolen the touch lock. It notifies your component when it should\n * give feedback to the user. (bouncing/highlighting/unhighlighting).\n *\n * - When a touch was activated (typically you highlight)\n * - When a touch was deactivated (typically you unhighlight)\n * - When a touch was \"pressed\" - a touch ended while still within the geometry\n *   of the element, and no other element (like scroller) has \"stolen\" touch\n *   lock (\"responder\") (Typically you bounce the element).\n *\n * A good tap interaction isn't as simple as you might think. There should be a\n * slight delay before showing a highlight when starting a touch. If a\n * subsequent touch move exceeds the boundary of the element, it should\n * unhighlight, but if that same touch is brought back within the boundary, it\n * should rehighlight again. A touch can move in and out of that boundary\n * several times, each time toggling highlighting, but a \"press\" is only\n * triggered if that touch ends while within the element's boundary and no\n * scroller (or anything else) has stolen the lock on touches.\n *\n * To create a new type of component that handles interaction using the\n * `Touchable` mixin, do the following:\n *\n * - Initialize the `Touchable` state.\n *\n *   getInitialState: function() {\n *     return merge(this.touchableGetInitialState(), yourComponentState);\n *   }\n *\n * - Add a method to get your touchable component's node.\n *   getTouchableNode: function() {\n *     return this.touchableRef.current\n *   }\n *\n * - Choose the rendered component who's touches should start the interactive\n *   sequence. On that rendered node, forward all `Touchable` responder\n *   handlers. You can choose any rendered node you like. Choose a node whose\n *   hit target you'd like to instigate the interaction sequence:\n *\n *   // In render function:\n *   return (\n *     <View\n *       ref={this.touchableRef}\n *       onStartShouldSetResponder={this.touchableHandleStartShouldSetResponder}\n *       onResponderTerminationRequest={this.touchableHandleResponderTerminationRequest}\n *       onResponderGrant={this.touchableHandleResponderGrant}\n *       onResponderMove={this.touchableHandleResponderMove}\n *       onResponderRelease={this.touchableHandleResponderRelease}\n *       onResponderTerminate={this.touchableHandleResponderTerminate}>\n *       <View>\n *         Even though the hit detection/interactions are triggered by the\n *         wrapping (typically larger) node, we usually end up implementing\n *         custom logic that highlights this inner one.\n *       </View>\n *     </View>\n *   );\n *\n * - You may set up your own handlers for each of these events, so long as you\n *   also invoke the `touchable*` handlers inside of your custom handler.\n *\n * - Implement the handlers on your component class in order to provide\n *   feedback to the user. See documentation for each of these class methods\n *   that you should implement.\n *\n *   touchableHandlePress: function() {\n *      this.performBounceAnimation();  // or whatever you want to do.\n *   },\n *   touchableHandleActivePressIn: function() {\n *     this.beginHighlighting(...);  // Whatever you like to convey activation\n *   },\n *   touchableHandleActivePressOut: function() {\n *     this.endHighlighting(...);  // Whatever you like to convey deactivation\n *   },\n *\n * - There are more advanced methods you can implement (see documentation below):\n *   touchableGetHighlightDelayMS: function() {\n *     return 20;\n *   }\n *   // In practice, *always* use a predeclared constant (conserve memory).\n *   touchableGetPressRectOffset: function() {\n *     return {top: 20, left: 20, right: 20, bottom: 100};\n *   }\n */\n\n/**\n * Touchable states.\n */\n\nvar States = {\n  NOT_RESPONDER: 'NOT_RESPONDER',\n  // Not the responder\n  RESPONDER_INACTIVE_PRESS_IN: 'RESPONDER_INACTIVE_PRESS_IN',\n  // Responder, inactive, in the `PressRect`\n  RESPONDER_INACTIVE_PRESS_OUT: 'RESPONDER_INACTIVE_PRESS_OUT',\n  // Responder, inactive, out of `PressRect`\n  RESPONDER_ACTIVE_PRESS_IN: 'RESPONDER_ACTIVE_PRESS_IN',\n  // Responder, active, in the `PressRect`\n  RESPONDER_ACTIVE_PRESS_OUT: 'RESPONDER_ACTIVE_PRESS_OUT',\n  // Responder, active, out of `PressRect`\n  RESPONDER_ACTIVE_LONG_PRESS_IN: 'RESPONDER_ACTIVE_LONG_PRESS_IN',\n  // Responder, active, in the `PressRect`, after long press threshold\n  RESPONDER_ACTIVE_LONG_PRESS_OUT: 'RESPONDER_ACTIVE_LONG_PRESS_OUT',\n  // Responder, active, out of `PressRect`, after long press threshold\n  ERROR: 'ERROR'\n};\n/*\n * Quick lookup map for states that are considered to be \"active\"\n */\n\nvar baseStatesConditions = {\n  NOT_RESPONDER: false,\n  RESPONDER_INACTIVE_PRESS_IN: false,\n  RESPONDER_INACTIVE_PRESS_OUT: false,\n  RESPONDER_ACTIVE_PRESS_IN: false,\n  RESPONDER_ACTIVE_PRESS_OUT: false,\n  RESPONDER_ACTIVE_LONG_PRESS_IN: false,\n  RESPONDER_ACTIVE_LONG_PRESS_OUT: false,\n  ERROR: false\n};\nvar IsActive = _objectSpread(_objectSpread({}, baseStatesConditions), {}, {\n  RESPONDER_ACTIVE_PRESS_OUT: true,\n  RESPONDER_ACTIVE_PRESS_IN: true\n});\n\n/**\n * Quick lookup for states that are considered to be \"pressing\" and are\n * therefore eligible to result in a \"selection\" if the press stops.\n */\nvar IsPressingIn = _objectSpread(_objectSpread({}, baseStatesConditions), {}, {\n  RESPONDER_INACTIVE_PRESS_IN: true,\n  RESPONDER_ACTIVE_PRESS_IN: true,\n  RESPONDER_ACTIVE_LONG_PRESS_IN: true\n});\nvar IsLongPressingIn = _objectSpread(_objectSpread({}, baseStatesConditions), {}, {\n  RESPONDER_ACTIVE_LONG_PRESS_IN: true\n});\n\n/**\n * Inputs to the state machine.\n */\nvar Signals = {\n  DELAY: 'DELAY',\n  RESPONDER_GRANT: 'RESPONDER_GRANT',\n  RESPONDER_RELEASE: 'RESPONDER_RELEASE',\n  RESPONDER_TERMINATED: 'RESPONDER_TERMINATED',\n  ENTER_PRESS_RECT: 'ENTER_PRESS_RECT',\n  LEAVE_PRESS_RECT: 'LEAVE_PRESS_RECT',\n  LONG_PRESS_DETECTED: 'LONG_PRESS_DETECTED'\n};\n/**\n * Mapping from States x Signals => States\n */\nvar Transitions = {\n  NOT_RESPONDER: {\n    DELAY: States.ERROR,\n    RESPONDER_GRANT: States.RESPONDER_INACTIVE_PRESS_IN,\n    RESPONDER_RELEASE: States.ERROR,\n    RESPONDER_TERMINATED: States.ERROR,\n    ENTER_PRESS_RECT: States.ERROR,\n    LEAVE_PRESS_RECT: States.ERROR,\n    LONG_PRESS_DETECTED: States.ERROR\n  },\n  RESPONDER_INACTIVE_PRESS_IN: {\n    DELAY: States.RESPONDER_ACTIVE_PRESS_IN,\n    RESPONDER_GRANT: States.ERROR,\n    RESPONDER_RELEASE: States.NOT_RESPONDER,\n    RESPONDER_TERMINATED: States.NOT_RESPONDER,\n    ENTER_PRESS_RECT: States.RESPONDER_INACTIVE_PRESS_IN,\n    LEAVE_PRESS_RECT: States.RESPONDER_INACTIVE_PRESS_OUT,\n    LONG_PRESS_DETECTED: States.ERROR\n  },\n  RESPONDER_INACTIVE_PRESS_OUT: {\n    DELAY: States.RESPONDER_ACTIVE_PRESS_OUT,\n    RESPONDER_GRANT: States.ERROR,\n    RESPONDER_RELEASE: States.NOT_RESPONDER,\n    RESPONDER_TERMINATED: States.NOT_RESPONDER,\n    ENTER_PRESS_RECT: States.RESPONDER_INACTIVE_PRESS_IN,\n    LEAVE_PRESS_RECT: States.RESPONDER_INACTIVE_PRESS_OUT,\n    LONG_PRESS_DETECTED: States.ERROR\n  },\n  RESPONDER_ACTIVE_PRESS_IN: {\n    DELAY: States.ERROR,\n    RESPONDER_GRANT: States.ERROR,\n    RESPONDER_RELEASE: States.NOT_RESPONDER,\n    RESPONDER_TERMINATED: States.NOT_RESPONDER,\n    ENTER_PRESS_RECT: States.RESPONDER_ACTIVE_PRESS_IN,\n    LEAVE_PRESS_RECT: States.RESPONDER_ACTIVE_PRESS_OUT,\n    LONG_PRESS_DETECTED: States.RESPONDER_ACTIVE_LONG_PRESS_IN\n  },\n  RESPONDER_ACTIVE_PRESS_OUT: {\n    DELAY: States.ERROR,\n    RESPONDER_GRANT: States.ERROR,\n    RESPONDER_RELEASE: States.NOT_RESPONDER,\n    RESPONDER_TERMINATED: States.NOT_RESPONDER,\n    ENTER_PRESS_RECT: States.RESPONDER_ACTIVE_PRESS_IN,\n    LEAVE_PRESS_RECT: States.RESPONDER_ACTIVE_PRESS_OUT,\n    LONG_PRESS_DETECTED: States.ERROR\n  },\n  RESPONDER_ACTIVE_LONG_PRESS_IN: {\n    DELAY: States.ERROR,\n    RESPONDER_GRANT: States.ERROR,\n    RESPONDER_RELEASE: States.NOT_RESPONDER,\n    RESPONDER_TERMINATED: States.NOT_RESPONDER,\n    ENTER_PRESS_RECT: States.RESPONDER_ACTIVE_LONG_PRESS_IN,\n    LEAVE_PRESS_RECT: States.RESPONDER_ACTIVE_LONG_PRESS_OUT,\n    LONG_PRESS_DETECTED: States.RESPONDER_ACTIVE_LONG_PRESS_IN\n  },\n  RESPONDER_ACTIVE_LONG_PRESS_OUT: {\n    DELAY: States.ERROR,\n    RESPONDER_GRANT: States.ERROR,\n    RESPONDER_RELEASE: States.NOT_RESPONDER,\n    RESPONDER_TERMINATED: States.NOT_RESPONDER,\n    ENTER_PRESS_RECT: States.RESPONDER_ACTIVE_LONG_PRESS_IN,\n    LEAVE_PRESS_RECT: States.RESPONDER_ACTIVE_LONG_PRESS_OUT,\n    LONG_PRESS_DETECTED: States.ERROR\n  },\n  error: {\n    DELAY: States.NOT_RESPONDER,\n    RESPONDER_GRANT: States.RESPONDER_INACTIVE_PRESS_IN,\n    RESPONDER_RELEASE: States.NOT_RESPONDER,\n    RESPONDER_TERMINATED: States.NOT_RESPONDER,\n    ENTER_PRESS_RECT: States.NOT_RESPONDER,\n    LEAVE_PRESS_RECT: States.NOT_RESPONDER,\n    LONG_PRESS_DETECTED: States.NOT_RESPONDER\n  }\n};\n\n// ==== Typical Constants for integrating into UI components ====\n// var HIT_EXPAND_PX = 20;\n// var HIT_VERT_OFFSET_PX = 10;\nvar HIGHLIGHT_DELAY_MS = 130;\nvar PRESS_EXPAND_PX = 20;\nvar LONG_PRESS_THRESHOLD = 500;\nvar LONG_PRESS_DELAY_MS = LONG_PRESS_THRESHOLD - HIGHLIGHT_DELAY_MS;\nvar LONG_PRESS_ALLOWED_MOVEMENT = 10;\n\n// Default amount \"active\" region protrudes beyond box\n\n/**\n * By convention, methods prefixed with underscores are meant to be @private,\n * and not @protected. Mixers shouldn't access them - not even to provide them\n * as callback handlers.\n *\n *\n * ========== Geometry =========\n * `Touchable` only assumes that there exists a `HitRect` node. The `PressRect`\n * is an abstract box that is extended beyond the `HitRect`.\n *\n *  +--------------------------+\n *  |                          | - \"Start\" events in `HitRect` cause `HitRect`\n *  |  +--------------------+  |   to become the responder.\n *  |  |  +--------------+  |  | - `HitRect` is typically expanded around\n *  |  |  |              |  |  |   the `VisualRect`, but shifted downward.\n *  |  |  |  VisualRect  |  |  | - After pressing down, after some delay,\n *  |  |  |              |  |  |   and before letting up, the Visual React\n *  |  |  +--------------+  |  |   will become \"active\". This makes it eligible\n *  |  |     HitRect        |  |   for being highlighted (so long as the\n *  |  +--------------------+  |   press remains in the `PressRect`).\n *  |        PressRect     o   |\n *  +----------------------|---+\n *           Out Region    |\n *                         +-----+ This gap between the `HitRect` and\n *                                 `PressRect` allows a touch to move far away\n *                                 from the original hit rect, and remain\n *                                 highlighted, and eligible for a \"Press\".\n *                                 Customize this via\n *                                 `touchableGetPressRectOffset()`.\n *\n *\n *\n * ======= State Machine =======\n *\n * +-------------+ <---+ RESPONDER_RELEASE\n * |NOT_RESPONDER|\n * +-------------+ <---+ RESPONDER_TERMINATED\n *     +\n *     | RESPONDER_GRANT (HitRect)\n *     v\n * +---------------------------+  DELAY   +-------------------------+  T + DELAY     +------------------------------+\n * |RESPONDER_INACTIVE_PRESS_IN|+-------->|RESPONDER_ACTIVE_PRESS_IN| +------------> |RESPONDER_ACTIVE_LONG_PRESS_IN|\n * +---------------------------+          +-------------------------+                +------------------------------+\n *     +            ^                         +           ^                                 +           ^\n *     |LEAVE_      |ENTER_                   |LEAVE_     |ENTER_                           |LEAVE_     |ENTER_\n *     |PRESS_RECT  |PRESS_RECT               |PRESS_RECT |PRESS_RECT                       |PRESS_RECT |PRESS_RECT\n *     |            |                         |           |                                 |           |\n *     v            +                         v           +                                 v           +\n * +----------------------------+  DELAY  +--------------------------+               +-------------------------------+\n * |RESPONDER_INACTIVE_PRESS_OUT|+------->|RESPONDER_ACTIVE_PRESS_OUT|               |RESPONDER_ACTIVE_LONG_PRESS_OUT|\n * +----------------------------+         +--------------------------+               +-------------------------------+\n *\n * T + DELAY => LONG_PRESS_DELAY_MS + DELAY\n *\n * Not drawn are the side effects of each transition. The most important side\n * effect is the `touchableHandlePress` abstract method invocation that occurs\n * when a responder is released while in either of the \"Press\" states.\n *\n * The other important side effects are the highlight abstract method\n * invocations (internal callbacks) to be implemented by the mixer.\n *\n *\n * @lends Touchable.prototype\n */\nvar TouchableMixin = {\n  // HACK (part 1): basic support for touchable interactions using a keyboard\n  componentDidMount: function componentDidMount() {\n    warnOnce('TouchableMixin', 'TouchableMixin is deprecated. Please use Pressable.');\n    var touchableNode = this.getTouchableNode && this.getTouchableNode();\n    if (touchableNode && touchableNode.addEventListener) {\n      this._touchableBlurListener = e => {\n        if (this._isTouchableKeyboardActive) {\n          if (this.state.touchable.touchState && this.state.touchable.touchState !== States.NOT_RESPONDER) {\n            this.touchableHandleResponderTerminate({\n              nativeEvent: e\n            });\n          }\n          this._isTouchableKeyboardActive = false;\n        }\n      };\n      touchableNode.addEventListener('blur', this._touchableBlurListener);\n    }\n  },\n  /**\n   * Clear all timeouts on unmount\n   */\n  componentWillUnmount: function componentWillUnmount() {\n    var touchableNode = this.getTouchableNode && this.getTouchableNode();\n    if (touchableNode && touchableNode.addEventListener) {\n      touchableNode.removeEventListener('blur', this._touchableBlurListener);\n    }\n    this.touchableDelayTimeout && clearTimeout(this.touchableDelayTimeout);\n    this.longPressDelayTimeout && clearTimeout(this.longPressDelayTimeout);\n    this.pressOutDelayTimeout && clearTimeout(this.pressOutDelayTimeout);\n    // Clear DOM nodes\n    this.pressInLocation = null;\n    this.state.touchable.responderID = null;\n  },\n  /**\n   * It's prefer that mixins determine state in this way, having the class\n   * explicitly mix the state in the one and only `getInitialState` method.\n   *\n   * @return {object} State object to be placed inside of\n   * `this.state.touchable`.\n   */\n  touchableGetInitialState: function touchableGetInitialState() {\n    return {\n      touchable: {\n        touchState: undefined,\n        responderID: null\n      }\n    };\n  },\n  // ==== Hooks to Gesture Responder system ====\n  /**\n   * Must return true if embedded in a native platform scroll view.\n   */\n  touchableHandleResponderTerminationRequest: function touchableHandleResponderTerminationRequest() {\n    return !this.props.rejectResponderTermination;\n  },\n  /**\n   * Must return true to start the process of `Touchable`.\n   */\n  touchableHandleStartShouldSetResponder: function touchableHandleStartShouldSetResponder() {\n    return !this.props.disabled;\n  },\n  /**\n   * Return true to cancel press on long press.\n   */\n  touchableLongPressCancelsPress: function touchableLongPressCancelsPress() {\n    return true;\n  },\n  /**\n   * Place as callback for a DOM element's `onResponderGrant` event.\n   * @param {SyntheticEvent} e Synthetic event from event system.\n   *\n   */\n  touchableHandleResponderGrant: function touchableHandleResponderGrant(e) {\n    var dispatchID = e.currentTarget;\n    // Since e is used in a callback invoked on another event loop\n    // (as in setTimeout etc), we need to call e.persist() on the\n    // event to make sure it doesn't get reused in the event object pool.\n    e.persist();\n    this.pressOutDelayTimeout && clearTimeout(this.pressOutDelayTimeout);\n    this.pressOutDelayTimeout = null;\n    this.state.touchable.touchState = States.NOT_RESPONDER;\n    this.state.touchable.responderID = dispatchID;\n    this._receiveSignal(Signals.RESPONDER_GRANT, e);\n    var delayMS = this.touchableGetHighlightDelayMS !== undefined ? Math.max(this.touchableGetHighlightDelayMS(), 0) : HIGHLIGHT_DELAY_MS;\n    delayMS = isNaN(delayMS) ? HIGHLIGHT_DELAY_MS : delayMS;\n    if (delayMS !== 0) {\n      this.touchableDelayTimeout = setTimeout(this._handleDelay.bind(this, e), delayMS);\n    } else {\n      this._handleDelay(e);\n    }\n    var longDelayMS = this.touchableGetLongPressDelayMS !== undefined ? Math.max(this.touchableGetLongPressDelayMS(), 10) : LONG_PRESS_DELAY_MS;\n    longDelayMS = isNaN(longDelayMS) ? LONG_PRESS_DELAY_MS : longDelayMS;\n    this.longPressDelayTimeout = setTimeout(this._handleLongDelay.bind(this, e), longDelayMS + delayMS);\n  },\n  /**\n   * Place as callback for a DOM element's `onResponderRelease` event.\n   */\n  touchableHandleResponderRelease: function touchableHandleResponderRelease(e) {\n    this.pressInLocation = null;\n    this._receiveSignal(Signals.RESPONDER_RELEASE, e);\n  },\n  /**\n   * Place as callback for a DOM element's `onResponderTerminate` event.\n   */\n  touchableHandleResponderTerminate: function touchableHandleResponderTerminate(e) {\n    this.pressInLocation = null;\n    this._receiveSignal(Signals.RESPONDER_TERMINATED, e);\n  },\n  /**\n   * Place as callback for a DOM element's `onResponderMove` event.\n   */\n  touchableHandleResponderMove: function touchableHandleResponderMove(e) {\n    // Measurement may not have returned yet.\n    if (!this.state.touchable.positionOnActivate) {\n      return;\n    }\n    var positionOnActivate = this.state.touchable.positionOnActivate;\n    var dimensionsOnActivate = this.state.touchable.dimensionsOnActivate;\n    var pressRectOffset = this.touchableGetPressRectOffset ? this.touchableGetPressRectOffset() : {\n      left: PRESS_EXPAND_PX,\n      right: PRESS_EXPAND_PX,\n      top: PRESS_EXPAND_PX,\n      bottom: PRESS_EXPAND_PX\n    };\n    var pressExpandLeft = pressRectOffset.left;\n    var pressExpandTop = pressRectOffset.top;\n    var pressExpandRight = pressRectOffset.right;\n    var pressExpandBottom = pressRectOffset.bottom;\n    var hitSlop = this.touchableGetHitSlop ? this.touchableGetHitSlop() : null;\n    if (hitSlop) {\n      pressExpandLeft += hitSlop.left || 0;\n      pressExpandTop += hitSlop.top || 0;\n      pressExpandRight += hitSlop.right || 0;\n      pressExpandBottom += hitSlop.bottom || 0;\n    }\n    var touch = extractSingleTouch(e.nativeEvent);\n    var pageX = touch && touch.pageX;\n    var pageY = touch && touch.pageY;\n    if (this.pressInLocation) {\n      var movedDistance = this._getDistanceBetweenPoints(pageX, pageY, this.pressInLocation.pageX, this.pressInLocation.pageY);\n      if (movedDistance > LONG_PRESS_ALLOWED_MOVEMENT) {\n        this._cancelLongPressDelayTimeout();\n      }\n    }\n    var isTouchWithinActive = pageX > positionOnActivate.left - pressExpandLeft && pageY > positionOnActivate.top - pressExpandTop && pageX < positionOnActivate.left + dimensionsOnActivate.width + pressExpandRight && pageY < positionOnActivate.top + dimensionsOnActivate.height + pressExpandBottom;\n    if (isTouchWithinActive) {\n      var prevState = this.state.touchable.touchState;\n      this._receiveSignal(Signals.ENTER_PRESS_RECT, e);\n      var curState = this.state.touchable.touchState;\n      if (curState === States.RESPONDER_INACTIVE_PRESS_IN && prevState !== States.RESPONDER_INACTIVE_PRESS_IN) {\n        // fix for t7967420\n        this._cancelLongPressDelayTimeout();\n      }\n    } else {\n      this._cancelLongPressDelayTimeout();\n      this._receiveSignal(Signals.LEAVE_PRESS_RECT, e);\n    }\n  },\n  /**\n   * Invoked when the item receives focus. Mixers might override this to\n   * visually distinguish the `VisualRect` so that the user knows that it\n   * currently has the focus. Most platforms only support a single element being\n   * focused at a time, in which case there may have been a previously focused\n   * element that was blurred just prior to this. This can be overridden when\n   * using `Touchable.Mixin.withoutDefaultFocusAndBlur`.\n   */\n  touchableHandleFocus: function touchableHandleFocus(e) {\n    this.props.onFocus && this.props.onFocus(e);\n  },\n  /**\n   * Invoked when the item loses focus. Mixers might override this to\n   * visually distinguish the `VisualRect` so that the user knows that it\n   * no longer has focus. Most platforms only support a single element being\n   * focused at a time, in which case the focus may have moved to another.\n   * This can be overridden when using\n   * `Touchable.Mixin.withoutDefaultFocusAndBlur`.\n   */\n  touchableHandleBlur: function touchableHandleBlur(e) {\n    this.props.onBlur && this.props.onBlur(e);\n  },\n  // ==== Abstract Application Callbacks ====\n\n  /**\n   * Invoked when the item should be highlighted. Mixers should implement this\n   * to visually distinguish the `VisualRect` so that the user knows that\n   * releasing a touch will result in a \"selection\" (analog to click).\n   *\n   * @abstract\n   * touchableHandleActivePressIn: function,\n   */\n\n  /**\n   * Invoked when the item is \"active\" (in that it is still eligible to become\n   * a \"select\") but the touch has left the `PressRect`. Usually the mixer will\n   * want to unhighlight the `VisualRect`. If the user (while pressing) moves\n   * back into the `PressRect` `touchableHandleActivePressIn` will be invoked\n   * again and the mixer should probably highlight the `VisualRect` again. This\n   * event will not fire on an `touchEnd/mouseUp` event, only move events while\n   * the user is depressing the mouse/touch.\n   *\n   * @abstract\n   * touchableHandleActivePressOut: function\n   */\n\n  /**\n   * Invoked when the item is \"selected\" - meaning the interaction ended by\n   * letting up while the item was either in the state\n   * `RESPONDER_ACTIVE_PRESS_IN` or `RESPONDER_INACTIVE_PRESS_IN`.\n   *\n   * @abstract\n   * touchableHandlePress: function\n   */\n\n  /**\n   * Invoked when the item is long pressed - meaning the interaction ended by\n   * letting up while the item was in `RESPONDER_ACTIVE_LONG_PRESS_IN`. If\n   * `touchableHandleLongPress` is *not* provided, `touchableHandlePress` will\n   * be called as it normally is. If `touchableHandleLongPress` is provided, by\n   * default any `touchableHandlePress` callback will not be invoked. To\n   * override this default behavior, override `touchableLongPressCancelsPress`\n   * to return false. As a result, `touchableHandlePress` will be called when\n   * lifting up, even if `touchableHandleLongPress` has also been called.\n   *\n   * @abstract\n   * touchableHandleLongPress: function\n   */\n\n  /**\n   * Returns the number of millis to wait before triggering a highlight.\n   *\n   * @abstract\n   * touchableGetHighlightDelayMS: function\n   */\n\n  /**\n   * Returns the amount to extend the `HitRect` into the `PressRect`. Positive\n   * numbers mean the size expands outwards.\n   *\n   * @abstract\n   * touchableGetPressRectOffset: function\n   */\n\n  // ==== Internal Logic ====\n\n  /**\n   * Measures the `HitRect` node on activation. The Bounding rectangle is with\n   * respect to viewport - not page, so adding the `pageXOffset/pageYOffset`\n   * should result in points that are in the same coordinate system as an\n   * event's `globalX/globalY` data values.\n   *\n   * - Consider caching this for the lifetime of the component, or possibly\n   *   being able to share this cache between any `ScrollMap` view.\n   *\n   * @sideeffects\n   * @private\n   */\n  _remeasureMetricsOnActivation: function _remeasureMetricsOnActivation() {\n    var tag = this.state.touchable.responderID;\n    if (tag == null) {\n      return;\n    }\n    UIManager.measure(tag, this._handleQueryLayout);\n  },\n  _handleQueryLayout: function _handleQueryLayout(l, t, w, h, globalX, globalY) {\n    //don't do anything UIManager failed to measure node\n    if (!l && !t && !w && !h && !globalX && !globalY) {\n      return;\n    }\n    this.state.touchable.positionOnActivate && Position.release(this.state.touchable.positionOnActivate);\n    this.state.touchable.dimensionsOnActivate &&\n    // $FlowFixMe\n    BoundingDimensions.release(this.state.touchable.dimensionsOnActivate);\n    this.state.touchable.positionOnActivate = Position.getPooled(globalX, globalY);\n    // $FlowFixMe\n    this.state.touchable.dimensionsOnActivate = BoundingDimensions.getPooled(w, h);\n  },\n  _handleDelay: function _handleDelay(e) {\n    this.touchableDelayTimeout = null;\n    this._receiveSignal(Signals.DELAY, e);\n  },\n  _handleLongDelay: function _handleLongDelay(e) {\n    this.longPressDelayTimeout = null;\n    var curState = this.state.touchable.touchState;\n    if (curState !== States.RESPONDER_ACTIVE_PRESS_IN && curState !== States.RESPONDER_ACTIVE_LONG_PRESS_IN) {\n      console.error('Attempted to transition from state `' + curState + '` to `' + States.RESPONDER_ACTIVE_LONG_PRESS_IN + '`, which is not supported. This is ' + 'most likely due to `Touchable.longPressDelayTimeout` not being cancelled.');\n    } else {\n      this._receiveSignal(Signals.LONG_PRESS_DETECTED, e);\n    }\n  },\n  /**\n   * Receives a state machine signal, performs side effects of the transition\n   * and stores the new state. Validates the transition as well.\n   *\n   * @param {Signals} signal State machine signal.\n   * @throws Error if invalid state transition or unrecognized signal.\n   * @sideeffects\n   */\n  _receiveSignal: function _receiveSignal(signal, e) {\n    var responderID = this.state.touchable.responderID;\n    var curState = this.state.touchable.touchState;\n    var nextState = Transitions[curState] && Transitions[curState][signal];\n    if (!responderID && signal === Signals.RESPONDER_RELEASE) {\n      return;\n    }\n    if (!nextState) {\n      throw new Error('Unrecognized signal `' + signal + '` or state `' + curState + '` for Touchable responder `' + responderID + '`');\n    }\n    if (nextState === States.ERROR) {\n      throw new Error('Touchable cannot transition from `' + curState + '` to `' + signal + '` for responder `' + responderID + '`');\n    }\n    if (curState !== nextState) {\n      this._performSideEffectsForTransition(curState, nextState, signal, e);\n      this.state.touchable.touchState = nextState;\n    }\n  },\n  _cancelLongPressDelayTimeout: function _cancelLongPressDelayTimeout() {\n    this.longPressDelayTimeout && clearTimeout(this.longPressDelayTimeout);\n    this.longPressDelayTimeout = null;\n  },\n  _isHighlight: function _isHighlight(state) {\n    return state === States.RESPONDER_ACTIVE_PRESS_IN || state === States.RESPONDER_ACTIVE_LONG_PRESS_IN;\n  },\n  _savePressInLocation: function _savePressInLocation(e) {\n    var touch = extractSingleTouch(e.nativeEvent);\n    var pageX = touch && touch.pageX;\n    var pageY = touch && touch.pageY;\n    var locationX = touch && touch.locationX;\n    var locationY = touch && touch.locationY;\n    this.pressInLocation = {\n      pageX,\n      pageY,\n      locationX,\n      locationY\n    };\n  },\n  _getDistanceBetweenPoints: function _getDistanceBetweenPoints(aX, aY, bX, bY) {\n    var deltaX = aX - bX;\n    var deltaY = aY - bY;\n    return Math.sqrt(deltaX * deltaX + deltaY * deltaY);\n  },\n  /**\n   * Will perform a transition between touchable states, and identify any\n   * highlighting or unhighlighting that must be performed for this particular\n   * transition.\n   *\n   * @param {States} curState Current Touchable state.\n   * @param {States} nextState Next Touchable state.\n   * @param {Signal} signal Signal that triggered the transition.\n   * @param {Event} e Native event.\n   * @sideeffects\n   */\n  _performSideEffectsForTransition: function _performSideEffectsForTransition(curState, nextState, signal, e) {\n    var curIsHighlight = this._isHighlight(curState);\n    var newIsHighlight = this._isHighlight(nextState);\n    var isFinalSignal = signal === Signals.RESPONDER_TERMINATED || signal === Signals.RESPONDER_RELEASE;\n    if (isFinalSignal) {\n      this._cancelLongPressDelayTimeout();\n    }\n    var isInitialTransition = curState === States.NOT_RESPONDER && nextState === States.RESPONDER_INACTIVE_PRESS_IN;\n    var isActiveTransition = !IsActive[curState] && IsActive[nextState];\n    if (isInitialTransition || isActiveTransition) {\n      this._remeasureMetricsOnActivation();\n    }\n    if (IsPressingIn[curState] && signal === Signals.LONG_PRESS_DETECTED) {\n      this.touchableHandleLongPress && this.touchableHandleLongPress(e);\n    }\n    if (newIsHighlight && !curIsHighlight) {\n      this._startHighlight(e);\n    } else if (!newIsHighlight && curIsHighlight) {\n      this._endHighlight(e);\n    }\n    if (IsPressingIn[curState] && signal === Signals.RESPONDER_RELEASE) {\n      var hasLongPressHandler = !!this.props.onLongPress;\n      var pressIsLongButStillCallOnPress = IsLongPressingIn[curState] && (\n      // We *are* long pressing.. // But either has no long handler\n      !hasLongPressHandler || !this.touchableLongPressCancelsPress()); // or we're told to ignore it.\n\n      var shouldInvokePress = !IsLongPressingIn[curState] || pressIsLongButStillCallOnPress;\n      if (shouldInvokePress && this.touchableHandlePress) {\n        if (!newIsHighlight && !curIsHighlight) {\n          // we never highlighted because of delay, but we should highlight now\n          this._startHighlight(e);\n          this._endHighlight(e);\n        }\n        this.touchableHandlePress(e);\n      }\n    }\n    this.touchableDelayTimeout && clearTimeout(this.touchableDelayTimeout);\n    this.touchableDelayTimeout = null;\n  },\n  _playTouchSound: function _playTouchSound() {\n    UIManager.playTouchSound();\n  },\n  _startHighlight: function _startHighlight(e) {\n    this._savePressInLocation(e);\n    this.touchableHandleActivePressIn && this.touchableHandleActivePressIn(e);\n  },\n  _endHighlight: function _endHighlight(e) {\n    if (this.touchableHandleActivePressOut) {\n      if (this.touchableGetPressOutDelayMS && this.touchableGetPressOutDelayMS()) {\n        this.pressOutDelayTimeout = setTimeout(() => {\n          this.touchableHandleActivePressOut(e);\n        }, this.touchableGetPressOutDelayMS());\n      } else {\n        this.touchableHandleActivePressOut(e);\n      }\n    }\n  },\n  // HACK (part 2): basic support for touchable interactions using a keyboard (including\n  // delays and longPress)\n  touchableHandleKeyEvent: function touchableHandleKeyEvent(e) {\n    var type = e.type,\n      key = e.key;\n    if (key === 'Enter' || key === ' ') {\n      if (type === 'keydown') {\n        if (!this._isTouchableKeyboardActive) {\n          if (!this.state.touchable.touchState || this.state.touchable.touchState === States.NOT_RESPONDER) {\n            this.touchableHandleResponderGrant(e);\n            this._isTouchableKeyboardActive = true;\n          }\n        }\n      } else if (type === 'keyup') {\n        if (this._isTouchableKeyboardActive) {\n          if (this.state.touchable.touchState && this.state.touchable.touchState !== States.NOT_RESPONDER) {\n            this.touchableHandleResponderRelease(e);\n            this._isTouchableKeyboardActive = false;\n          }\n        }\n      }\n      e.stopPropagation();\n      // prevent the default behaviour unless the Touchable functions as a link\n      // and Enter is pressed\n      if (!(key === 'Enter' && AccessibilityUtil.propsToAriaRole(this.props) === 'link')) {\n        e.preventDefault();\n      }\n    }\n  },\n  withoutDefaultFocusAndBlur: {}\n};\n\n/**\n * Provide an optional version of the mixin where `touchableHandleFocus` and\n * `touchableHandleBlur` can be overridden. This allows appropriate defaults to\n * be set on TV platforms, without breaking existing implementations of\n * `Touchable`.\n */\nvar touchableHandleFocus = TouchableMixin.touchableHandleFocus,\n  touchableHandleBlur = TouchableMixin.touchableHandleBlur,\n  TouchableMixinWithoutDefaultFocusAndBlur = _objectWithoutPropertiesLoose(TouchableMixin, [\"touchableHandleFocus\", \"touchableHandleBlur\"]);\nTouchableMixin.withoutDefaultFocusAndBlur = TouchableMixinWithoutDefaultFocusAndBlur;\nvar Touchable = {\n  Mixin: TouchableMixin,\n  TOUCH_TARGET_DEBUG: false,\n  // Highlights all touchable targets. Toggle with Inspector.\n  /**\n   * Renders a debugging overlay to visualize touch target with hitSlop (might not work on Android).\n   */\n  renderDebugView: _ref => {\n    var color = _ref.color,\n      hitSlop = _ref.hitSlop;\n    if (!Touchable.TOUCH_TARGET_DEBUG) {\n      return null;\n    }\n    if (process.env.NODE_ENV !== 'production') {\n      throw Error('Touchable.TOUCH_TARGET_DEBUG should not be enabled in prod!');\n    }\n    var debugHitSlopStyle = {};\n    hitSlop = hitSlop || {\n      top: 0,\n      bottom: 0,\n      left: 0,\n      right: 0\n    };\n    for (var key in hitSlop) {\n      debugHitSlopStyle[key] = -hitSlop[key];\n    }\n    var normalizedColor = normalizeColor(color);\n    if (typeof normalizedColor !== 'number') {\n      return null;\n    }\n    var hexColor = '#' + ('00000000' + normalizedColor.toString(16)).substr(-8);\n    return /*#__PURE__*/React.createElement(View, {\n      pointerEvents: \"none\",\n      style: _objectSpread({\n        position: 'absolute',\n        borderColor: hexColor.slice(0, -2) + '55',\n        // More opaque\n        borderWidth: 1,\n        borderStyle: 'dashed',\n        backgroundColor: hexColor.slice(0, -2) + '0F'\n      }, debugHitSlopStyle)\n    });\n  }\n};\nexport default Touchable;","/**\n * Copyright (c) Nicolas Gallagher.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\nclass Alert {\n  static alert() {}\n}\nexport default Alert;"],"names":["initialURL","canUseDOM","window","location","href","open","url","target","urlToOpen","URL","toString","indexOf","constructor","this","_eventCallbacks","_dispatchEvent","event","_len","arguments","length","data","Array","_key","listeners","isArray","map","listener","addEventListener","eventType","callback","_this","push","remove","filteredCallbacks","filter","c","removeEventListener","console","error","canOpenURL","Promise","resolve","getInitialURL","openURL","e","reject","_validateURL","invariant","share","content","options","message","title","undefined","navigator","text","Error","sharedAction","dismissedAction","twoArgumentPooler","a1","a2","Klass","instancePool","instance","pop","call","standardReleaser","destructor","poolSize","DEFAULT_POOLER","addPoolingTo","CopyConstructor","pooler","NewKlass","getPooled","release","PooledClass","BoundingDimensions","width","height","prototype","getPooledFromElement","element","offsetWidth","offsetHeight","Position","left","top","extractSingleTouch","nativeEvent","touches","changedTouches","hasTouches","hasChangedTouches","States","baseStatesConditions","NOT_RESPONDER","RESPONDER_INACTIVE_PRESS_IN","RESPONDER_INACTIVE_PRESS_OUT","RESPONDER_ACTIVE_PRESS_IN","RESPONDER_ACTIVE_PRESS_OUT","RESPONDER_ACTIVE_LONG_PRESS_IN","RESPONDER_ACTIVE_LONG_PRESS_OUT","ERROR","IsActive","_objectSpread","IsPressingIn","IsLongPressingIn","Signals","Transitions","DELAY","RESPONDER_GRANT","RESPONDER_RELEASE","RESPONDER_TERMINATED","ENTER_PRESS_RECT","LEAVE_PRESS_RECT","LONG_PRESS_DETECTED","TouchableMixin","componentDidMount","warnOnce","touchableNode","getTouchableNode","_touchableBlurListener","_isTouchableKeyboardActive","state","touchable","touchState","touchableHandleResponderTerminate","componentWillUnmount","touchableDelayTimeout","clearTimeout","longPressDelayTimeout","pressOutDelayTimeout","pressInLocation","responderID","touchableGetInitialState","touchableHandleResponderTerminationRequest","props","rejectResponderTermination","touchableHandleStartShouldSetResponder","disabled","touchableLongPressCancelsPress","touchableHandleResponderGrant","dispatchID","currentTarget","persist","_receiveSignal","delayMS","touchableGetHighlightDelayMS","Math","max","isNaN","setTimeout","_handleDelay","bind","longDelayMS","touchableGetLongPressDelayMS","LONG_PRESS_THRESHOLD","_handleLongDelay","touchableHandleResponderRelease","touchableHandleResponderMove","positionOnActivate","dimensionsOnActivate","pressRectOffset","touchableGetPressRectOffset","right","bottom","pressExpandLeft","pressExpandTop","pressExpandRight","pressExpandBottom","hitSlop","touchableGetHitSlop","touch","pageX","pageY","_getDistanceBetweenPoints","_cancelLongPressDelayTimeout","prevState","touchableHandleFocus","onFocus","touchableHandleBlur","onBlur","_remeasureMetricsOnActivation","tag","UIManager","measure","_handleQueryLayout","l","t","w","h","globalX","globalY","curState","signal","nextState","_performSideEffectsForTransition","_isHighlight","_savePressInLocation","locationX","locationY","aX","aY","bX","bY","deltaX","deltaY","sqrt","curIsHighlight","newIsHighlight","isInitialTransition","isActiveTransition","touchableHandleLongPress","_startHighlight","_endHighlight","hasLongPressHandler","onLongPress","pressIsLongButStillCallOnPress","touchableHandlePress","_playTouchSound","playTouchSound","touchableHandleActivePressIn","touchableHandleActivePressOut","touchableGetPressOutDelayMS","touchableHandleKeyEvent","type","key","stopPropagation","AccessibilityUtil","propsToAriaRole","preventDefault","withoutDefaultFocusAndBlur","TouchableMixinWithoutDefaultFocusAndBlur","_objectWithoutPropertiesLoose","Touchable","Mixin","TOUCH_TARGET_DEBUG","renderDebugView","_ref","color","debugHitSlopStyle","normalizedColor","normalizeColor","hexColor","substr","React","View","pointerEvents","style","position","borderColor","slice","borderWidth","borderStyle","backgroundColor","alert"],"sourceRoot":""}