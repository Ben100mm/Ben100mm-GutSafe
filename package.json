{
  "name": "gutsafe-app",
  "version": "1.0.0",
  "private": true,
  "description": "GutSafe - Private Proprietary Gut Health Management Application",
  "author": "Benjamin [Last Name] <[your-email@domain.com]>",
  "license": "PROPRIETARY",
  "copyright": "Copyright (c) 2024 Benjamin [Last Name]. All rights reserved.",
  "repository": {
    "type": "git",
    "url": "https://github.com/Ben100mm/Ben100mm-GutSafe.git",
    "private": true
  },
  "keywords": [
    "gut-health",
    "food-tracking",
    "health-app",
    "proprietary",
    "private"
  ],
  "dependencies": {
    "@craco/craco": "^7.1.0",
    "@react-native-async-storage/async-storage": "^2.2.0",
    "@react-native-community/blur": "^4.4.1",
    "@react-native-community/netinfo": "^11.3.1",
    "@react-navigation/bottom-tabs": "^6.5.11",
    "@react-navigation/native": "^6.1.9",
    "@react-navigation/stack": "^6.3.20",
    "ajv": "^8.17.1",
    "crypto-js": "^4.2.0",
    "expo-camera": "^17.0.8",
    "expo-sqlite": "^14.0.6",
    "pg": "^8.11.3",
    "mysql2": "^3.6.5",
    "expo-haptics": "^15.0.7",
    "expo-linear-gradient": "^15.0.7",
    "expo-status-bar": "^1.10.3",
    "react": "^18.3.1",
    "react-dom": "^18.3.1",
    "react-native": "^0.72.17",
    "react-native-gesture-handler": "^2.28.0",
    "react-native-reanimated": "^4.1.0",
    "react-native-safe-area-context": "^4.7.4",
    "react-native-screens": "^3.25.0",
    "react-native-svg": "^15.13.0",
    "react-native-web": "^0.21.1",
    "react-native-web-linear-gradient": "^1.1.2",
    "react-refresh": "^0.17.0",
    "react-scripts": "5.0.1",
    "typescript": "^5.9.2",
    "zod": "^4.1.11",
    "zustand": "^5.0.8",
    "@openfoodfacts/openfoodfacts-nodejs": "^2.0.0-alpha.19"
  },
  "scripts": {
    "start": "cross-env NODE_ENV=development PORT=9001 dotenv -e .env.local -- craco start",
    "start:prod": "cross-env NODE_ENV=production PORT=9001 dotenv -e .env.production -- craco start",
    "start:dev": "cross-env NODE_ENV=development PORT=9001 dotenv -e .env.development -- craco start",
    "build": "cross-env NODE_ENV=production dotenv -e .env.production -- craco build",
    "build:dev": "cross-env NODE_ENV=development dotenv -e .env.development -- craco build",
    "build:analyze": "cross-env NODE_ENV=production dotenv -e .env.production -- craco build && npx webpack-bundle-analyzer build/static/js/*.js",
    "test": "cross-env NODE_ENV=test dotenv -e .env.test -- craco test --watchAll=false",
    "test:watch": "cross-env NODE_ENV=test dotenv -e .env.test -- craco test",
    "test:coverage": "cross-env NODE_ENV=test dotenv -e .env.test -- craco test --coverage --watchAll=false",
    "test:e2e": "cross-env NODE_ENV=test dotenv -e .env.test -- jest --config=jest.config.js --testPathPattern=e2e",
    "eject": "react-scripts eject",
    "analyze": "npm run build && npx webpack-bundle-analyzer build/static/js/*.js",
    "analyze:serve": "npx webpack-bundle-analyzer build/static/js/*.js -p 8888",
    "type-check": "tsc --noEmit",
    "type-check:watch": "tsc --noEmit --watch",
    "lint": "eslint src --ext .ts,.tsx,.js,.jsx --max-warnings 0",
    "lint:fix": "eslint src --ext .ts,.tsx,.js,.jsx --fix",
    "lint:staged": "lint-staged",
    "lint:security": "eslint src --ext .ts,.tsx,.js,.jsx --config .eslintrc.security.js",
    "lint:sonar": "eslint src --ext .ts,.tsx,.js,.jsx --config .eslintrc.sonar.js",
    "format": "prettier --write \"src/**/*.{ts,tsx,js,jsx,json,css,md}\"",
    "format:check": "prettier --check \"src/**/*.{ts,tsx,js,jsx,json,css,md}\"",
    "format:staged": "prettier --write",
    "precommit": "lint-staged",
    "prepare": "husky",
    "quality:check": "npm run lint && npm run format:check && npm run type-check && npm run test:coverage",
    "quality:fix": "npm run lint:fix && npm run format && npm run type-check",
    "sonar:scan": "sonar-scanner -Dsonar.projectKey=gutsafe-app -Dsonar.sources=src -Dsonar.host.url=http://localhost:9000 -Dsonar.login=admin -Dsonar.password=admin",
    "sonar:scan:ci": "sonar-scanner -Dsonar.projectKey=gutsafe-app -Dsonar.sources=src -Dsonar.host.url=$SONAR_HOST_URL -Dsonar.login=$SONAR_TOKEN",
    "security:audit": "npm audit --audit-level moderate",
    "security:fix": "npm audit fix",
    "security:check": "npm run lint:security && npm run security:audit",
    "ios": "react-native run-ios",
    "ios:simulator": "react-native run-ios --simulator=\"iPhone 15\"",
    "android": "react-native run-android",
    "android:debug": "react-native run-android --variant=debug",
    "android:release": "react-native run-android --variant=release",
    "web": "cross-env NODE_ENV=development PORT=9001 dotenv -e .env.local -- craco start",
    "web:build": "cross-env NODE_ENV=production dotenv -e .env.production -- craco build",
    "web:serve": "serve -s build -l 9001",
    "metro": "react-native start",
    "metro:reset": "react-native start --reset-cache",
    "clean": "rimraf build dist node_modules/.cache",
    "clean:all": "rimraf build dist node_modules/.cache node_modules",
    "doctor": "react-native doctor",
    "bundle:ios": "react-native bundle --platform ios --dev false --entry-file index.js --bundle-output ios/main.jsbundle",
    "bundle:android": "react-native bundle --platform android --dev false --entry-file index.js --bundle-output android/app/src/main/assets/index.android.bundle",
    "release:ios": "cd ios && xcodebuild -workspace GutSafe.xcworkspace -scheme GutSafe -configuration Release -destination generic/platform=iOS -archivePath GutSafe.xcarchive archive",
    "release:android": "cd android && ./gradlew assembleRelease",
    "env:check": "node -e \"console.log('Environment check:', process.env.NODE_ENV, process.env.PORT)\"",
    "env:validate": "node scripts/validate-env.js",
    "env:setup": "node scripts/setup-environment.js",
    "secrets:generate": "node scripts/generate-secrets.js",
    "secrets:generate:dev": "node scripts/generate-secrets.js development",
    "secrets:generate:staging": "node scripts/generate-secrets.js staging",
    "secrets:generate:prod": "node scripts/generate-secrets.js production",
    "secrets:generate:test": "node scripts/generate-secrets.js test",
    "health:check": "node -e \"const { healthChecks } = require('./src/config/health'); healthChecks.runAll().then(status => console.log(healthChecks.format(status)))\"",
    "deploy:dev": "npm run build:dev && npm run web:serve",
    "deploy:staging": "npm run build && npm run web:serve",
    "deploy:prod": "npm run build && npm run web:serve",
    "deploy:test": "npm run build:dev && npm run web:serve",
    "demo": "node scripts/demo-environment.js",
    "demo:setup": "node scripts/demo-environment.js setup",
    "demo:secrets": "node scripts/demo-environment.js secrets",
    "demo:config": "node scripts/demo-environment.js config",
    "demo:validation": "node scripts/demo-environment.js validation",
    "demo:health": "node scripts/demo-environment.js health",
    "demo:deployment": "node scripts/demo-environment.js deployment"
  },
  "devDependencies": {
    "@babel/plugin-syntax-flow": "^7.27.1",
    "@babel/preset-flow": "^7.27.1",
    "@testing-library/jest-native": "^5.4.3",
    "@testing-library/react-native": "^13.3.3",
    "@types/crypto-js": "^4.2.2",
    "@types/react": "^18.2.0",
    "@types/react-native": "^0.72.0",
    "@typescript-eslint/eslint-plugin": "^6.21.0",
    "@typescript-eslint/parser": "^6.21.0",
    "cross-env": "^7.0.3",
    "dotenv": "^16.4.5",
    "dotenv-cli": "^7.4.2",
    "dotenv-expand": "^11.0.6",
    "eslint": "^8.57.0",
    "eslint-config-prettier": "^9.1.0",
    "eslint-plugin-import": "^2.29.1",
    "eslint-plugin-jsx-a11y": "^6.8.0",
    "eslint-plugin-prettier": "^5.1.3",
    "eslint-plugin-react": "^7.34.1",
    "eslint-plugin-react-hooks": "^4.6.0",
    "eslint-plugin-react-native": "^4.1.0",
    "eslint-import-resolver-typescript": "^3.5.1",
    "husky": "^9.0.11",
    "jest": "^29.7.0",
    "lint-staged": "^15.2.2",
    "prettier": "^3.2.5",
    "react-test-renderer": "^18.3.1",
    "rimraf": "^5.0.5",
    "serve": "^14.2.1",
    "webpack-bundle-analyzer": "^4.10.2",
    "sonarjs": "^1.0.0",
    "eslint-plugin-sonarjs": "^0.23.0",
    "eslint-plugin-security": "^1.7.1",
    "eslint-plugin-unicorn": "^49.0.0",
    "eslint-plugin-no-secrets": "^0.8.8",
    "eslint-plugin-promise": "^6.1.1",
    "eslint-plugin-n": "^16.6.2",
    "eslint-plugin-regexp": "^1.15.0"
  },
  "eslintConfig": {
    "extends": [
      "react-app",
      "react-app/jest",
      "@typescript-eslint/recommended",
      "prettier"
    ],
    "parser": "@typescript-eslint/parser",
    "plugins": [
      "@typescript-eslint",
      "react",
      "react-hooks",
      "react-native",
      "jsx-a11y",
      "import"
    ],
    "rules": {
      "react-hooks/rules-of-hooks": "error",
      "react-hooks/exhaustive-deps": "warn",
      "@typescript-eslint/no-unused-vars": "error",
      "@typescript-eslint/no-explicit-any": "warn",
      "react-native/no-unused-styles": "error",
      "react-native/split-platform-components": "error",
      "react-native/no-inline-styles": "warn",
      "react-native/no-color-literals": "warn"
    },
    "env": {
      "browser": true,
      "es2021": true,
      "node": true,
      "jest": true
    }
  },
  "prettier": {
    "semi": true,
    "trailingComma": "es5",
    "singleQuote": true,
    "printWidth": 80,
    "tabWidth": 2,
    "useTabs": false
  },
  "lint-staged": {
    "src/**/*.{ts,tsx,js,jsx}": [
      "eslint --fix",
      "prettier --write",
      "git add"
    ],
    "src/**/*.{json,css,md}": [
      "prettier --write",
      "git add"
    ],
    "*.{json,md,yml,yaml}": [
      "prettier --write",
      "git add"
    ]
  },
  "jest": {
    "testMatch": [
      "**/__tests__/**/*.(ts|tsx|js)",
      "**/*.(test|spec).(ts|tsx|js)"
    ],
    "collectCoverageFrom": [
      "src/**/*.{ts,tsx}",
      "!src/**/*.d.ts",
      "!src/**/*.test.{ts,tsx}",
      "!src/**/*.spec.{ts,tsx}",
      "!src/**/__tests__/**"
    ],
    "coverageThreshold": {
      "global": {
        "branches": 90,
        "functions": 90,
        "lines": 90,
        "statements": 90
      }
    }
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  }
}
